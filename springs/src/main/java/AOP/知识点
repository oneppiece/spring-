# 概念 
* 连接点(JoinPoint)
  
  ```
  spring仅支持方法的连接点，仅能在方法调用前，方法调用后，方法抛出异常时，方法调用前后这些程序执行点织入增强。
  1. 用方法表示的程序执行点。
  2. 用相对位置表示的方位。
  ```
* 切点(PointCut)
  
  ```
  spring中通过org.springframework.aop.PointCut接口进行描述。使用类和方法作为连接点的查询条件。

  ```
* 增强(Advice)

    ```
    增强是织入目标类连接点上的一段程序代码。
    ```
* 目标对象(Target)
* 引介(Introduction)
* 织入(Weaving)
* 织入(Weaving)
    ```
    织入是将增强添加到目标类的具体连接点上的过程。
    1.编译器织入，要求特殊的Java编译器。
    2.类装载期织入，要求特殊的类装载器。
    3.动态代理织入，在运行期为目标类添加增强生成子类的方式。
    Spring采用动态代理织入，而AspectJ采用编译器和类装载器织入。
    ```
* 代理(Proxy)
    ```
    一个类被织入增强后产生的结果类
    ```
* 切面(Aspect)
    ```
    切面由切点和增强组成，既包括横切逻辑的定义，也包括连接点的定义。
    ```
Spring AOP使用动态代理在运行期织入增强的代码。
    * 基于JDK的动态代理    
    * 基于CGlib的动态代理
    `JDK本身只提供接口的代理，而不支持类的代理。`
    * Spring支持的五种增强类型:
        * 前置增强:BeforeAdvice    
        * 后置增强:AfterAdvice    
        * 环绕增强:MethodInterceptor
        * 异常抛出增强:ThrowsAdvice
        * 引介增强:IntroductionInterceptor
            
    

    